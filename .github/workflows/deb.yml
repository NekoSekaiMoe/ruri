name: Build deb

on:
  workflow_dispatch:
  push:
    paths:
      - 'debian/**'
      - '.github/workflows/deb.yml'
      - 'arm64.sh'
      - 'Makefile.am'

jobs:
  amd64:
    name: Build amd64 deb
    runs-on: ubuntu-latest
    container: debian:bookworm
    steps:
      - name: Test
        run: |
          apt update && apt install -y git wget debhelper dpkg-dev dh-make dh-exec dh-autoreconf

      - name: Check latest version
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global --add safe.directory /__w/ruri/ruri
          rm -rf -v build src/include/version.h
          bash -x autogen.sh
          git config --global user.name "root"
          git config --global user.email "your_email@example.com"
          git add .
          git commit -m "Test"

      - name: build amd64 deb
        run: |
          git archive --prefix=ruri-3.8/ -o ../ruri_3.8.orig.tar.gz HEAD
          apt build-dep . -y
          dpkg-buildpackage -F -d
          mkdir -p build
          mv ../ruri_* build

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ruri-deb-amd64
          path: build/ruri*

  arm64:
    name: Build arm64 deb
    runs-on: ubuntu-24.04-arm
    container: debian:bookworm
    steps:
      - name: Test
        run: |
          apt update && apt install -y git wget debhelper dpkg-dev dh-make dh-exec dh-autoreconf

      - name: Check latest version
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global --add safe.directory /__w/ruri/ruri
          rm -rf -v build  src/include/version.h
          bash -x autogen.sh
          git config --global user.name "root"
          git config --global user.email "your_email@example.com"
          git add .
          git commit -m "Test"

      - name: build arm64 deb
        run: |
          git archive --prefix=ruri-3.8/ -o ../ruri_3.8.orig.tar.gz HEAD
          apt build-dep . -y
          dpkg-buildpackage -b -us -uc -d
          mkdir -p build
          mv ../ruri_* build

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ruri-deb-arm64
          path: build/ruri*

  loong64:
    runs-on: ubuntu-latest
    steps:

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true
          key: ${{ github.job }}-${{ matrix.os }}  # Eg. "some_build-ubuntu-latest"

      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y binfmt-support binutils build-essential libcap-dev libfdt-dev libglib2.0-dev libpixman-1-dev libseccomp-dev ninja-build pkg-config python3 python3-tomli tree upx-ucl xz-utils zlib1g-dev meson

      - name: Build x86_64 Ruri
        run: |
          mkdir -p build
          cd build
          git clone --depth 1 https://github.com/moe-hacker/ruri.git
          cd ruri
          ccache gcc -Wl,--gc-sections -static src/*.c src/easteregg/*.c -o ruri -lcap -lseccomp -lpthread

      - name: Build loong64 qemu
        run: |
          cd build
          git clone --depth=1 https://github.com/qemu/qemu.git
          cd qemu
          export CC="ccache gcc"
          export CXX="ccache g++"
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          ./configure --static --disable-system --target-list=loongarch64-linux-user
          ninja -C build

          sudo cp build/qemu-loongarch64 /usr/bin/qemu-loongarch64-static

      - name: Build loongarch64 system
        run: |
          cd build
          mkdir debian
          aria2c https://github.com/2cd/debian-museum/releases/download/unstable/unstable_sid_loong64_2024-03-15.tar.zst -o root.tar.zst
          tar -xf root.tar.zst -C debian
          sudo cp /usr/bin/qemu-loongarch64-static ./debian/usr/bin/

      - name: Build loong64 Ruri
        run: |
          cd build
          sudo bash -c 'cat <<EOF >> ./debian/build.sh
          rm -f /etc/resolv.conf
          echo nameserver 1.1.1.1 > /etc/resolv.conf
          apt-get update
          apt-get install -y wget make clang git libseccomp-dev libcap-dev libc-dev binutils upx-ucl tar dpkg-dev pkg-config dephelper dh-make
          git clone --depth 1 https://github.com/NekoSekaiMoe/ruri.git
          cd ruri
          apt build-dep . -y
          dpkg-buildpackage -b -us -uc -d
          EOF'

          sudo chmod +x ./debian/build.sh
          sudo ./ruri/ruri -p -a loong64 -q /usr/bin/qemu-loongarch64-static ./debian /bin/sh /build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ruri-deb-loong64
          path: |
            debian/ruri*.deb

  release:
    name: Release
    needs:
      - amd64
      - arm64
      - loong64
    runs-on: ubuntu-latest
    steps:
      - name: Check latest version
        uses: actions/download-artifact@v4
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rurideb-${{ github.sha }}
          name: rurideb-${{ github.sha }}
          prerelease: false
          files: |
             ruri-deb-arm64/*
             ruri-deb-amd64/*
             ruri-deb-loong64/*
